openapi: 3.0.4
info:
  title: PetCare Veterinary API
  description: API REST para la gestión de citas, mascotas y dueños en una clínica veterinaria.
  version: 1.0.0
  contact:
    name: ITQ Distributed and Cloud Systems
    email: contacto@petcare.mx
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html  

servers:
  - url: http://localhost:8080/api/v1
    description: Servidor local de desarrollo
  - url: https://api.petcare.com/api/v1
    description: Servidor de producción en la nube AWS

tags:
  - name: owners
    description: Operaciones relacionadas con los dueños de mascotas
  - name: pets
    description: Operaciones sobre el registro de mascotas
  - name: appointments
    description: Gestión de citas veterinarias

paths:
  /owners:
    get:
      tags:
        - owners
      summary: Obtener todos los dueños registrados
      description: Recupera una lista de todos los dueños con opción de filtrado
      operationId: getAllOwners
      parameters:
        - name: name
          in: query
          description: Filtrar por nombre del dueño
          required: false
          schema:
            type: string
        - name: phone
          in: query
          description: Filtrar por teléfono
          required: false
          schema:
            type: string
      responses:
        '200':  # ✅ Corregido: 200 para GET
          description: Lista de dueños obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerList'
              example:
                owners:
                  - ownerId: 1
                    name: "Yaneli Díaz"
                    phone: "4421234567"
                    email: "yanelidiaz93@gmail.com"
                    registeredAt: "2024-01-15T10:30:00Z"
                total: 1
        '400':
          description: Parámetros de consulta inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - owners
      summary: Registrar un nuevo dueño
      description: Registra un nuevo dueño en el sistema
      operationId: createOwner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRequest'
            example:
              name: "Yaneli Díaz"
              phone: "4421234567"
              email: "yanelidiaz93@gmail.com"
      responses:
        '201':
          description: Dueño registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerResponse'
              example:
                ownerId: 1
                name: "Yaneli Díaz"
                phone: "4421234567"
                email: "yanelidiaz93@gmail.com"
                registeredAt: "2024-01-15T10:30:00Z"
        '400':
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: El teléfono ya está registrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /owners/{ownerId}:
    get:
      tags:
        - owners
      summary: Obtener dueño específico
      description: Recupera información de un dueño específico por ID
      operationId: getOwnerById
      parameters:
        - name: ownerId
          in: path
          description: ID único del dueño
          required: true
          schema:
            type: integer
            format: int32
          example: 1
      responses:
        '200':
          description: Dueño encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerResponse'
        '404':
          description: Dueño no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - owners
      summary: Actualizar dueño completo
      description: Actualiza todos los datos de un dueño
      operationId: updateOwner
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRequest'
      responses:
        '200':
          description: Dueño actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerResponse'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Dueño no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - owners
      summary: Eliminar dueño
      description: Elimina un dueño del sistema
      operationId: deleteOwner
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Dueño eliminado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Dueño no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: No se puede eliminar - tiene mascotas registradas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pets:
    get:
      tags:
        - pets
      summary: Obtener todas las mascotas registradas
      description: Recupera lista de mascotas con filtros opcionales
      operationId: getAllPets
      parameters:
        - name: ownerId
          in: query
          description: Filtrar por ID del dueño
          required: false
          schema:
            type: integer
        - name: species
          in: query
          description: Filtrar por especie
          required: false
          schema:
            type: string
            enum: [Perro, Gato, Conejo, Ave]
      responses:
        '200':
          description: Lista de mascotas obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetList'
        '400':
          description: Parámetros inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - pets
      summary: Registrar una nueva mascota
      description: Registra una nueva mascota en el sistema
      operationId: createPet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
            example:
              name: "Tomas"
              species: "Perro"
              breed: "Husky"
              age: 4
              ownerId: 1
      responses:
        '201':
          description: Mascota registrada correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Dueño no encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pets/{petId}:
    get:
      tags:
        - pets
      summary: Obtener mascota específica
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Mascota encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '404':
          description: Mascota no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - pets
      summary: Actualizar mascota
      operationId: updatePet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
      responses:
        '200':
          description: Mascota actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetResponse'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Mascota no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - pets
      summary: Eliminar mascota
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Mascota eliminada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Mascota no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /appointments:
    get:
      tags:
        - appointments
      summary: Obtener todas las citas agendadas
      description: Recupera lista de citas con filtros opcionales
      operationId: getAllAppointments
      parameters:
        - name: petId
          in: query
          description: Filtrar por ID de mascota
          required: false
          schema:
            type: integer
        - name: date
          in: query
          description: Filtrar por fecha específica
          required: false
          schema:
            type: string
            format: date
        - name: reason
          in: query
          description: Filtrar por motivo
          required: false
          schema:
            type: string
            enum: [Vacunación, Consulta general, Emergencia, Control]
      responses:
        '200':
          description: Lista de citas veterinarias obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentList'
        '400':
          description: Parámetros inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - appointments
      summary: Registrar una nueva cita veterinaria
      description: Agenda una nueva cita para una mascota
      operationId: createAppointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentRequest'
            example:
              petId: 2
              date: "2025-11-03T10:00:00Z"
              reason: "Vacunación"
              notes: "Revisar posible alergia"
      responses:
        '201':
          description: Cita registrada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Mascota no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflicto de horario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /appointments/{appointmentId}:
    get:
      tags:
        - appointments
      summary: Obtener cita específica
      operationId: getAppointmentById
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Cita encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '404':
          description: Cita no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - appointments
      summary: Actualizar cita
      operationId: updateAppointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentRequest'
      responses:
        '200':
          description: Cita actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentResponse'
        '400':
          description: Datos inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Cita no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflicto de horario
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - appointments
      summary: Cancelar cita
      operationId: cancelAppointment
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Cita cancelada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          description: Cita no encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# ✅ SECCIÓN COMPONENTS COMPLETA
components:
  schemas:
    # ===== OWNERS SCHEMAS =====
    OwnerRequest:
      type: object
      description: Datos para registrar/actualizar un dueño
      required:
        - name
        - phone
      properties:
        name:
          type: string
          description: Nombre completo del dueño
          minLength: 3
          maxLength: 100
          example: "Yaneli Díaz"
        phone:
          type: string
          description: Número de teléfono (10 dígitos)
          pattern: '^[0-9]{10}$'
          example: "4421234567"
        email:
          type: string
          description: Correo electrónico del dueño
          format: email
          example: "yanelidiaz93@gmail.com"

    OwnerResponse:
      type: object
      description: Respuesta con datos del dueño
      required:
        - ownerId
        - name
        - phone
        - registeredAt
      properties:
        ownerId:
          type: integer
          format: int32
          description: ID único del dueño
          example: 1
        name:
          type: string
          example: "Yaneli Díaz"
        phone:
          type: string
          example: "4421234567"
        email:
          type: string
          format: email
          nullable: true
          example: "yanelidiaz93@gmail.com"
        registeredAt:
          type: string
          format: date-time
          description: Fecha de registro
          example: "2024-01-15T10:30:00Z"

    OwnerList:
      type: object
      description: Lista de dueños
      properties:
        owners:
          type: array
          items:
            $ref: '#/components/schemas/OwnerResponse'
        total:
          type: integer
          description: Total de dueños
          example: 1

    # ===== PETS SCHEMAS =====
    PetRequest:
      type: object
      description: Datos para registrar/actualizar una mascota
      required:
        - name
        - species
        - ownerId
      properties:
        name:
          type: string
          description: Nombre de la mascota
          minLength: 1
          maxLength: 50
          example: "Tomas"
        species:
          type: string
          description: Especie de la mascota
          enum: [Perro, Gato, Conejo, Ave]
          example: "Perro"
        breed:
          type: string
          description: Raza de la mascota
          maxLength: 50
          example: "Husky"
        age:
          type: integer
          description: Edad en años
          minimum: 0
          maximum: 30
          example: 4
        ownerId:
          type: integer
          format: int32
          description: ID del dueño propietario
          example: 1

    PetResponse:
      type: object
      description: Respuesta con datos de la mascota
      required:
        - petId
        - name
        - species
        - ownerId
        - registeredAt
      properties:
        petId:
          type: integer
          format: int32
          description: ID único de la mascota
          example: 1
        name:
          type: string
          example: "Tomas"
        species:
          type: string
          enum: [Perro, Gato, Conejo, Ave]
          example: "Perro"
        breed:
          type: string
          nullable: true
          example: "Husky"
        age:
          type: integer
          nullable: true
          example: 4
        ownerId:
          type: integer
          format: int32
          example: 1
        ownerName:
          type: string
          description: Nombre del dueño (para referencia)
          example: "Yaneli Díaz"
        registeredAt:
          type: string
          format: date-time
          example: "2024-01-15T11:00:00Z"

    PetList:
      type: object
      description: Lista de mascotas
      properties:
        pets:
          type: array
          items:
            $ref: '#/components/schemas/PetResponse'
        total:
          type: integer
          example: 1

    # ===== APPOINTMENTS SCHEMAS =====
    AppointmentRequest:
      type: object
      description: Datos para crear/actualizar una cita
      required:
        - petId
        - date
        - reason
      properties:
        petId:
          type: integer
          format: int32
          description: ID de la mascota
          example: 2
        date:
          type: string
          format: date-time
          description: Fecha y hora de la cita
          example: "2025-11-03T10:00:00Z"
        reason:
          type: string
          description: Motivo de la cita
          enum: [Vacunación, Consulta general, Emergencia, Control]
          example: "Vacunación"
        notes:
          type: string
          description: Notas adicionales
          maxLength: 500
          example: "Revisar posible alergia"

    AppointmentResponse:
      type: object
      description: Respuesta con datos de la cita
      required:
        - appointmentId
        - petId
        - date
        - reason
        - status
        - createdAt
      properties:
        appointmentId:
          type: integer
          format: int32
          description: ID único de la cita
          example: 1
        petId:
          type: integer
          format: int32
          example: 2
        petName:
          type: string
          description: Nombre de la mascota (para referencia)
          example: "Tomas"
        ownerName:
          type: string
          description: Nombre del dueño (para referencia)
          example: "Yaneli Díaz"
        date:
          type: string
          format: date-time
          example: "2025-11-03T10:00:00Z"
        reason:
          type: string
          enum: [Vacunación, Consulta general, Emergencia, Control]
          example: "Vacunación"
        notes:
          type: string
          nullable: true
          example: "Revisar posible alergia"
        status:
          type: string
          enum: [scheduled, completed, cancelled, no-show]
          example: "scheduled"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T12:00:00Z"

    AppointmentList:
      type: object
      description: Lista de citas
      properties:
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/AppointmentResponse'
        total:
          type: integer
          example: 1

    # ===== COMMON SCHEMAS =====
    DeleteResponse:
      type: object
      description: Confirmación de eliminación
      required:
        - id
        - message
        - deletedAt
      properties:
        id:
          type: integer
          format: int32
          description: ID del elemento eliminado
          example: 1
        message:
          type: string
          example: "Registro eliminado exitosamente"
        deletedAt:
          type: string
          format: date-time
          example: "2024-01-15T15:30:00Z"

    Error:
      type: object
      description: Respuesta de error estándar
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Código de error
          example: "INVALID_INPUT"
        message:
          type: string
          description: Mensaje de error
          example: "El nombre del dueño es requerido"
        details:
          type: object
          description: Detalles adicionales del error
          additionalProperties: true
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
